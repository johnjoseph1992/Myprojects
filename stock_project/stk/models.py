#append _id to all foreign key fields...
#initial data required --> stkHealthStatus, stkCurrentStatus...
from __future__ import unicode_literals

from django.db import models


'''class StkSample2(models.Model):
	sampleid = models.IntegerField(primary_key=True)
	samplefield = models.CharField(max_length=30)'''

class stkMainCategory(models.Model):
	maincatid = models.AutoField(primary_key=True)
	maincatname = models.CharField(max_length=50)

	class Meta:
        	db_table = 'stkMainCategory'  

class stkSubCategory(models.Model):
	subcatid = models.AutoField(primary_key=True)
	subcatname = models.CharField(max_length=50)
	lastvalue = models.IntegerField(default=0)
	maincatid = models.ForeignKey(stkMainCategory,db_column='maincatid')

	class Meta:
		db_table = 'stkSubCategory'

class stkCompanyMaster(models.Model):
	firmid = models.AutoField(primary_key=True)
	firmname = models.CharField(max_length=50)

	class Meta:
        	db_table = 'stkCompanyMaster'

class stkFirmAccess(models.Model):
	empcode = models.CharField(max_length=50,primary_key=True)
	firmid = models.ForeignKey(stkCompanyMaster,db_column='firmid')

	class Meta:
        	db_table = 'stkFirmAccess'

class stkStoreMaster(models.Model):
	storeid = models.AutoField(primary_key=True)
	mainstorename = models.CharField(max_length=50)
	firmid = models.ForeignKey(stkCompanyMaster,db_column='firmid')
	underwhichstore = models.IntegerField(default=0) #0 means independent store
	#underwhichstore = models.ForeignKey(stkStoreMaster,db_column='storeid')

	class Meta:
		db_table = 'stkStoreMaster'

class stkDept(models.Model):			#a dept can have multiple attached stores, not possible here...
	deptid = models.AutoField(primary_key=True)
	storeid = models.ForeignKey(stkStoreMaster,db_column='storeid')

	class Meta:
		db_table = 'stkDept'

class stkLocation(models.Model):		#only store connected depts are possible...
	locationid = models.AutoField(primary_key=True)
	locationname = models.CharField(max_length=50)
	deptid = models.ForeignKey(stkDept,db_column='deptid')

	class Meta:
		db_table = 'stkLocation'

class stkPrivilegeGroup(models.Model):
	groupid = models.AutoField(primary_key=True)
	groupname = models.CharField(max_length=50)
	storeid = models.ForeignKey(stkStoreMaster,db_column='storeid')

	class Meta:
		db_table = 'stkPrivilegeGroup'

class stkLogintab(models.Model):
	staffid = models.IntegerField(default=0)
	groupid = models.ForeignKey(stkPrivilegeGroup,db_column='groupid')

	class Meta:
		db_table = 'stkLogintab'


class stkPrivilegeDescription(models.Model):
	add = models.IntegerField(default=0) #0 or 1 indicating permission
	edit = models.IntegerField(default=0)
	delete = models.IntegerField(default=0)
	groupid = models.ForeignKey(stkPrivilegeGroup,db_column='groupid') #use groupid_id when refering in views.

	class Meta:
		db_table = 'stkPrivilegeDescription'

class stkUnits(models.Model):
	unitid = models.AutoField(primary_key=True)
	unitname = models.CharField(max_length=50)
	noofcontentsifany = models.IntegerField(null=True)

	class Meta:
		db_table = 'stkUnits'

class stkBrandMaster(models.Model):
	brandid = models.AutoField(primary_key=True)
	brandname = models.CharField(max_length=50)
	brandcode = models.CharField(max_length=50)

	class Meta:
		db_table = 'stkBrandMaster'

class stkModelMaster(models.Model):
	modelid = models.AutoField(primary_key=True)
	modelname = models.CharField(max_length=50)
	specification = models.CharField(max_length=50)
	productinfo = models.CharField(max_length=100)
	remarks = models.CharField(max_length=100,null=True)
	qtyavailable = models.IntegerField(default=0)
	modelcode = models.CharField(max_length=50)
	brandid = models.ForeignKey(stkBrandMaster,db_column='brandid')
	unitid = models.ForeignKey(stkUnits,db_column='unitid')
	subcatid = models.ForeignKey(stkSubCategory,db_column='subcatid')

	class Meta:
		db_table = 'stkModelMaster'

'''class stkBrandDetails(models.Model): #id field will be autogenerated
	specification = models.CharField(max_length=50)
	productinfo = models.CharField(max_length=100)
	remarks = models.CharField(max_length=100)
	qtyavailable = models.IntegerField(default=0)
	brandid = models.ForeignKey(stkBrandMaster,db_column='brandid')
	unitid = models.ForeignKey(stkUnits,db_column='unitid')

	class Meta:
		db_table = 'stkBrandDetails'  '''

class stkItemMaster(models.Model):
	itemid = models.AutoField(primary_key=True)
	qtyavailable = models.IntegerField(default=0)
	existingqty = models.IntegerField(default=25)
	totalnoofcontents = models.IntegerField(default=0,null=True) #inside box
	whethersubitem = models.CharField(default='N',max_length=5)
	itemcode = models.CharField(default='N',max_length=40)
	maincatid = models.ForeignKey(stkMainCategory,db_column='maincatid',default=1)
	brandid = models.ForeignKey(stkBrandMaster,db_column='brandid')
	modelid = models.ForeignKey(stkModelMaster,db_column='modelid')
	unitid = models.ForeignKey(stkUnits,db_column='unitid')
	subcatid = models.ForeignKey(stkSubCategory,db_column='subcatid')
	firmid = models.ForeignKey(stkCompanyMaster,db_column='firmid')
	storeid = models.ForeignKey(stkStoreMaster,db_column='storeid')

	class Meta:
		db_table = 'stkItemMaster'

class stkSupplier(models.Model):
	supplierid = models.AutoField(primary_key=True)
	suppliername = models.CharField(max_length=50)
	address = models.CharField(max_length=150)
	city = models.CharField(max_length=50)
	district = models.CharField(max_length=50)
	country = models.CharField(max_length=50)
	state = models.CharField(max_length=50)
	mailid = models.CharField(max_length=50)
	mobileorlandline = models.CharField(max_length=15)
	vatno = models.IntegerField(default=0)
	rating = models.IntegerField(default=75)

	class Meta:
		db_table = 'stkSupplier'

class stkPurchaseMaster(models.Model):
	purchaseid = models.AutoField(primary_key=True)
	totprice = models.DecimalField(max_digits=12, decimal_places=2)
	tottax = models.DecimalField(max_digits=12, decimal_places=2)
	netamount = models.DecimalField(max_digits=12, decimal_places=2)
	totdiscount = models.DecimalField(max_digits=12, decimal_places=2)
	invoiceno = models.IntegerField(default=0)
	invoicedate = models.DateField()
	purchasedate = models.DateField()
	entereddate = models.DateField()
	enteredbyid = models.CharField(max_length=30) #EMP code
	supplierid = models.ForeignKey(stkSupplier,db_column='supplierid')

	class Meta:
		db_table = 'stkPurchaseMaster'

class stkPurchaseReturn(models.Model): ##WORKS ONLY IF stkItemDetails is defined properly##
	purchasereturnid = models.AutoField(primary_key=True)
	#unitsreturned = models.IntegerField(default=0) removed
	#noofitemsreturned = models.IntegerField(default=0) removed
	returneddate = models.DateField()
	returnedbyid = models.CharField(max_length=30) #EMP code
	enteredbyid = models.CharField(max_length=30) #EMP code
	description = models.CharField(max_length=100,null=True) #new field
	maincatid = models.ForeignKey(stkMainCategory,db_column='maincatid')
	#purchaseid = models.IntegerField(default=0)
	purchaseid = models.ForeignKey(stkPurchaseMaster,db_column='purchaseid')
	#itemid = models.ForeignKey(stkItemMaster,db_column='itemid')
	itemdetailsid = models.ForeignKey('stkItemDetails',db_column='itemdetailsid') #specify model name as string when it is defined below.
	
	class Meta:
		db_table = 'stkPurchaseReturn'

class stkPurchaseInfo(models.Model):
	recordid = models.AutoField(primary_key=True)
	description = models.CharField(max_length=100)
	quantity = models.DecimalField(max_digits=10, decimal_places=2)
	unitprice = models.DecimalField(max_digits=12, decimal_places=2)
	individualdiscount = models.DecimalField(max_digits=12, decimal_places=2)
	individualtaxpercentage = models.IntegerField(default=0)
	individualtaxamount = models.DecimalField(max_digits=12, decimal_places=2)
	stkregtrpageno = models.IntegerField(default=0)
	purchasereturnstatus = models.CharField(max_length=3,default='N') #Y or N [YES or NO]
	#purchasereturnid = models.ForeignKey(stkPurchaseReturn,db_column='purchasereturnid',null=True) moved to stkPurchaseReturnDetails
	purchasereturnqty = models.IntegerField(default=0) #new field
	purchaseid = models.ForeignKey(stkPurchaseMaster,db_column='purchaseid')
	unitid = models.ForeignKey(stkUnits,db_column='unitid')
	itemid = models.ForeignKey(stkItemMaster,db_column='itemid')
	maincatid = models.ForeignKey(stkMainCategory,db_column='maincatid')
	
	class Meta:
		db_table = 'stkPurchaseInfo'

class stkPurchaseReturnDetails(models.Model):
	purchasereturndetailsid = models.AutoField(primary_key=True)
	recordid = models.ForeignKey(stkPurchaseInfo,db_column='recordid') #ie, purchaseinfodetailsid (recordid here)
	purchasereturnid = models.ForeignKey(stkPurchaseReturn,db_column='purchasereturnid',null=True)
	
	class Meta:
		db_table = 'stkPurchaseReturnDetails'

class stkPurchaseOrder(models.Model):
	refno = models.IntegerField(default=0) #it is same as stk regtr page no
	quotid = models.IntegerField(default=0)
	
	class Meta:
		db_table = 'stkPurchaseOrder'

class stkServiceCompany(models.Model):
	companyid = models.AutoField(primary_key=True)
	companyname = models.CharField(max_length=50)
	mailid = models.CharField(max_length=70)
	phone = models.CharField(max_length=15)
	address = models.CharField(max_length=100)
	
	class Meta:
		db_table = 'stkServiceCompany'

class stkAssembled(models.Model):
	assembledid = models.AutoField(primary_key=True)
	mainitemid = models.ForeignKey(stkItemMaster,db_column='mainitemid',related_name='%(class)s_mainitemid') #without %(class)s it shows an error.
	subitemid = models.ForeignKey(stkItemMaster,db_column='subitemid')
	
	class Meta:
		db_table = 'stkAssembled'


class stkIssue(models.Model):
	issueid = models.AutoField(primary_key=True)
	issuedate = models.DateField(null=True)
	issuedqty = models.IntegerField(default=1,null=True)
	issuedbyid = models.CharField(max_length=20,null=True) #EMP code of issuer
	issueddeptid = models.ForeignKey(stkDept,db_column='deptid')
	#itemid = models.ForeignKey(stkItemMaster,db_column='itemid')
	#itemdetailsid = models.ForeignKey('stkItemDetails',db_column='itemdetailsid') #specify model name as string when it is defined below.
	unitid = models.ForeignKey(stkUnits,db_column='unitid')
	maincatid = models.ForeignKey(stkMainCategory,db_column='maincatid')
	
	class Meta:
		db_table = 'stkIssue'

class stkIssueDetails(models.Model): ##WORKS ONLY IF stkItemDetails is defined properly##
	issuedetailsid = models.AutoField(primary_key=True)
	latestissue = models.CharField(max_length=2,default=1) #0 or 1 (1 => latest, 0 => old)
	issueid = models.ForeignKey(stkIssue,db_column='issueid')
	itemdetailsid = models.ForeignKey('stkItemDetails',db_column='itemdetailsid') #specify model name as string when it is defined below.
	
	class Meta:
		db_table = 'stkIssueDetails'

class stkCurrentStatus(models.Model): #store current status for all items ie, arrived/issued/etc...
	currentstatusid = models.AutoField(primary_key=True)
	currentstatusvalue = models.CharField(max_length=30)
	
	class Meta:
		db_table = 'stkCurrentStatus'

class stkHealthStatus(models.Model): #store health status for all items ie, good/bad/complaint
	healthstatusid = models.AutoField(primary_key=True)
	healthstatusvalue = models.CharField(max_length=10)
	
	class Meta:
		db_table = 'stkHealthStatus'

class stkOutgoing(models.Model): ##WORKS ONLY IF stkItemDetails is defined properly##
	itemoutgoingid = models.AutoField(primary_key=True)
	datedispatch = models.DateField()
	datereturn = models.DateField(null=True)
	remarks = models.CharField(max_length=80)
	itemsenderid = models.CharField(max_length=20)
	itemreceiverid = models.CharField(max_length=20,null=True)
	#currentstatus = models.CharField(max_length=4,default='G') #health status specified at outgoingtime
	currentstatusid = models.ForeignKey(stkHealthStatus,db_column='currentstatusid',default=1,related_name='%(class)s_currentstatusid') #health status specified at outgoingtime
	#oldstatus = models.CharField(max_length=4,default='G',db_column='oldstatus') #This field not needed
	#oldhealthstatus = models.CharField(max_length=4,default='G') #health status before outgoingtime
	oldhealthstatusid = models.ForeignKey(stkHealthStatus,db_column='oldhealthstatusid',default=1) #health status before outgoingtime
	#oldoriginalstatus = models.CharField(max_length=30,default='arrived') #original status before outgoingtime, eg:arrived/issued/etc...
	oldoriginalstatusid = models.ForeignKey(stkCurrentStatus,db_column='oldoriginalstatusid',default=1) #original status before outgoingtime, eg:arrived/issued/etc...
	itemdetailsid = models.ForeignKey('stkItemDetails',db_column='itemdetailsid') #specify model name as string when it is defined below.
	companyid = models.ForeignKey(stkServiceCompany,db_column='companyid')
	
	class Meta:
		db_table = 'stkOutgoing'

class stkWarrantyOrAmc(models.Model): ##WORKS ONLY IF stkItemDetails is defined properly##
	warrantyoramcid = models.AutoField(primary_key=True)
	warrantyfrom = models.DateField()
	warrantyto = models.DateField()
	woramc = models.CharField(max_length=4,default='W') #W or A (warranty or amc)
	itemdetailsid = models.ForeignKey('stkItemDetails',db_column='itemdetailsid') #specify model name as string when it is defined below.
	
	class Meta:
		db_table = 'stkWarrantyOrAmc'

class stkItemDetails(models.Model): #put many fields as null initially, then change as required.
	itemdetailsid = models.AutoField(primary_key=True)
	#health = models.CharField(max_length=4,default='G') #G or B or C(good or bad or complaint)
	healthid = models.ForeignKey(stkHealthStatus,db_column='healthid',default=1)#1G or 2B or 3C(good or bad or complaint)
	#currentstatus = models.CharField(max_length=30,default='arrived')#arrived/issued/returnedfromdept/sentformaintenance/receivedaftermaintenance
	currentstatusid = models.ForeignKey(stkCurrentStatus,db_column='currentstatusid',default=1)#1_arrived/2_issued/3_returnedfromdept/4_sentformaintenance/5_receivedaftermaintenance
	assembledstatus = models.CharField(max_length=3,default='N') #Y or N (yes or no)
	manualentered = models.CharField(max_length=3,default='N') #Y or N (yes or no)
	existing = models.CharField(max_length=3,default='N') #Y or N (yes or no)
	serialno = models.CharField(max_length=60,null=True)
	fisatid = models.CharField(max_length=100)
	itemoutgoingstatus = models.CharField(max_length=3,default='N') #Y or N (yes or no)
	issuedornot = models.CharField(max_length=3,default='N') #Y or N (yes or no)
	installedornot = models.CharField(max_length=3,default='N') #Y or N (yes or no)
	returnedfromdept = models.IntegerField(default=0) #increment every time a return from dept comes
	interval = models.IntegerField(default=1) #interval for preventive maintenance
	chargeofitemid = models.CharField(max_length=20,null=True) #who he is current incharge of this item.
	itemid = models.ForeignKey(stkItemMaster,db_column='itemid')
	assembledid = models.ForeignKey(stkAssembled,db_column='assembledid',null=True)
	purchaseid = models.ForeignKey(stkPurchaseMaster,db_column='purchaseid',null=True)
	firmid = models.ForeignKey(stkCompanyMaster,db_column='firmid')
	deptid = models.ForeignKey(stkDept,db_column='deptid',null=True)
	itemoutgoingid = models.ForeignKey(stkOutgoing,db_column='itemoutgoingid',null=True)
	locationid = models.ForeignKey(stkLocation,db_column='locationid',null=True)
	issueid = models.ForeignKey(stkIssue,db_column='issueid',null=True)
	storeid = models.ForeignKey(stkStoreMaster,db_column='storeid')
	warrantyoramcid = models.ForeignKey(stkWarrantyOrAmc,db_column='warrantyoramcid',null=True) #if null then their is no warranty
	purchasereturnid = models.ForeignKey(stkPurchaseReturn,db_column='purchasereturnid',null=True)
	
	class Meta:
		db_table = 'stkItemDetails'

class stkReturnFromDept(models.Model):
	returnid = models.AutoField(primary_key=True)
	returndate = models.DateField()
	remarks = models.CharField(max_length=100,null=True)
	fromdeptid = models.ForeignKey(stkDept,db_column='fromdeptid')
	fromlocationid = models.ForeignKey(stkLocation,db_column='fromlocationid',null=True)
	issuedetailsid = models.ForeignKey(stkIssueDetails,db_column='issuedetailsid')
	returnedbyid = models.ForeignKey(stkFirmAccess,db_column='returnedbyid')
	enteredbyid = models.ForeignKey(stkFirmAccess,db_column='enteredbyid',related_name='%(class)s_enteredbyid')#without %(class)s it shows a foreign key error. [multiple foreign key fields to same table]
	itemdetailsid = models.ForeignKey(stkItemDetails,db_column='itemdetailsid')
	
	class Meta:
		db_table = 'stkReturnFromDept'

class stkBreakdown(models.Model): #table for breakdown maintenance
	breakdownid = models.AutoField(primary_key=True)
	maintenancedetails = models.CharField(max_length=100,null=True) #what is done on the item
	rdam = models.DateField(null=True) #received date after maintenance (rdam)
	technicianname = models.CharField(max_length=100) #who done the maintenance
	complaints = models.CharField(max_length=50) #reasons for maintanence(complaints)
	itemdetailsid = models.ForeignKey(stkItemDetails,db_column='itemdetailsid')
	companyid = models.ForeignKey(stkServiceCompany,db_column='companyid')
	itemoutgoingid = models.ForeignKey(stkOutgoing,db_column='itemoutgoingid')

	class Meta:
		db_table = 'stkBreakdown'

class stkSampleUpload(models.Model):
	returnid = models.AutoField(primary_key=True)	
	name = models.CharField(max_length=100)
	age = models.IntegerField()
	mark = models.IntegerField()
	
	class Meta:
		db_table = 'stkSampleUpload'






























